#!/usr/bin/env bash

BUNDLE_VERSION=0.6.15

# OS Check. Put here because here is where we download the precompiled
# bundles that are arch specific.
UNAME=$(uname)
if [ "$UNAME" != "Linux" -a "$UNAME" != "Darwin" ] ; then
    echo "Sorry, this OS is not supported."
    exit 1
fi

# The METEOR_UNIVERSAL_FLAG will save the indicator how to handle unofficially
# support environments. For armvXl boards we are support pre built binaries from
# bintray. For all other systems we check, that there are system binries available
# for node and mongo. If METEOR_UNIVERSAL_FLAG is not set, then this runs as same 
# as official meteor installer and starter
METEOR_UNIVERSAL_FLAG=

if [ "$UNAME" = "Darwin" ] ; then
    if [ "i386" != "$(uname -p)" -o "1" != "$(sysctl -n hw.cpu64bit_capable 2>/dev/null || echo 0)" ] ; then

        # Can't just test uname -m = x86_64, because Snow Leopard can
        # return other values.
        echo "Only 64-bit Intel processors are supported at this time."
        exit 1
    fi
    ARCH="x86_64"
elif [ "$UNAME" = "Linux" ] ; then
    ARCH="$(uname -m)"
    if [ "$ARCH" != "i686" -a "$ARCH" != "x86_64" ] ; then
        if [ "$ARCH" != "armv6l" -a "$ARCH" != "armv7l" ] ; then
            # set flag that we are in universal system environment support mode
            METEOR_UNIVERSAL_FLAG="ENV"
        else
            # set flag that we are in unofficial ARM support mode
            METEOR_UNIVERSAL_FLAG="ARM"
        fi
    fi
fi
PLATFORM="${UNAME}_${ARCH}"

# Find the script dir, following symlinks. Note that symlink can be relative or
# absolute. Too bad 'readlink -f' and 'realpath' (the command-line program) are
# not portable.  We don't stress about infinite loops or bad links, because the
# OS has already resolved this symlink chain once in order to actually run the
# shell script.
ORIG_DIR="$(pwd)"
SCRIPT="$0"
while true; do
  # The symlink might be relative, so we have to actually cd to the right place
  # each time in order to resolve it.
  cd "$(dirname "$SCRIPT")"
  if [ ! -L "$(basename "$SCRIPT")" ]; then
    SCRIPT_DIR="$(pwd -P)"
    break
  fi
  SCRIPT="$(readlink "$(basename "$SCRIPT")")"
done
cd "$ORIG_DIR"



function install_dev_bundle {
    set -e
    trap "echo Failed to install dependency kit." EXIT

    TARBALL="dev_bundle_${PLATFORM}_${BUNDLE_VERSION}.tar.gz"
    BUNDLE_TMPDIR="$SCRIPT_DIR/dev_bundle.xxx"

    rm -rf "$BUNDLE_TMPDIR"
    mkdir "$BUNDLE_TMPDIR"

    # duplicated in scripts/windows/download-dev-bundle.ps1:
    DEV_BUNDLE_URL_ROOT="https://d3sqy0vbqsdhku.cloudfront.net/"
    # If you set $USE_TEST_DEV_BUNDLE_SERVER then we will download
    # dev bundles copied by copy-dev-bundle-from-jenkins.sh without --prod.
    # It still only does this if the version number has changed
    # (setting it won't cause it to automatically delete a prod dev bundle).
    if [ -n "$USE_TEST_DEV_BUNDLE_SERVER" ] ; then
        DEV_BUNDLE_URL_ROOT="https://s3.amazonaws.com/com.meteor.static/test/"
    fi

    # test for unofficial supported ARM architecture
    if [ "$METEOR_UNIVERSAL_FLAG" == "ARM" ] ; then
        # Use bintray release downloads
        DEV_BUNDLE_URL_ROOT="https://dl.bintray.com/4commerce-technologies-ag/meteor-universal/arm_dev_bundles/"
    fi

    # test if we can download the dev_bundle tarball
    function __check_tarball_download() {
      CHECK_TARBALL=$(curl --head --location --silent "$DEV_BUNDLE_URL_ROOT$TARBALL" --output /dev/null --write-out '%{http_code}')
      # Write down a message instead doing a false download
      if [ "$CHECK_TARBALL" != "200" ] ; then
        if [ -n "$METEOR_UNIVERSAL_FLAG" ] ; then
            # We have identified that there is no pre built dev_bundle available
            # and we do not provide yet downloadable pre builts for that platform
            echo ""
            echo "You are trying to run Meteor on yet not official supported platform: ${PLATFORM}"
            echo "There is currently no pre-built dev_bundle available for your system."
            echo "Check https://github.com/4commerce-technologies-AG/meteor to get"
            echo "the information how you may generate your own dev_bundle using"
            echo "scripts/generate-dev-bundle.sh"
            echo ""
        fi
        echo "Unable to download: $DEV_BUNDLE_URL_ROOT$TARBALL"
        echo "Pre-built tarball is not available!"
        echo ""
        exit 1
      fi
    }

    if [ -f "$SCRIPT_DIR/$TARBALL" ] ; then
        echo "Skipping download and installing kit from $SCRIPT_DIR/$TARBALL" >&2
        tar -xzf "$SCRIPT_DIR/$TARBALL" -C "$BUNDLE_TMPDIR"
    elif [ -n "$SAVE_DEV_BUNDLE_TARBALL" ] ; then
        # URL duplicated in tools/server/target.sh.in
        __check_tarball_download
        curl --location -# "$DEV_BUNDLE_URL_ROOT$TARBALL" >"$SCRIPT_DIR/$TARBALL"
        tar -xzf "$SCRIPT_DIR/$TARBALL" -C "$BUNDLE_TMPDIR"
    else
        __check_tarball_download
        curl --location -# "$DEV_BUNDLE_URL_ROOT$TARBALL" | tar -xzf - -C "$BUNDLE_TMPDIR"
    fi

    test -x "${BUNDLE_TMPDIR}/bin/node" # bomb out if it didn't work, eg no net

    # Delete old dev bundle and rename the new one on top of it.
    rm -rf "$SCRIPT_DIR/dev_bundle"
    mv "$BUNDLE_TMPDIR" "$SCRIPT_DIR/dev_bundle"

    echo "Installed dependency kit v${BUNDLE_VERSION} in dev_bundle." >&2
    echo >&2

    trap - EXIT
    set +e
}


if [ -d "$SCRIPT_DIR/.git" ] || [ -f "$SCRIPT_DIR/.git" ]; then
    # In a checkout.
    if [ ! -d "$SCRIPT_DIR/dev_bundle" ] ; then
        echo "It's the first time you've run Meteor from a git checkout." >&2
        echo "I will download a kit containing all of Meteor's dependencies." >&2
        install_dev_bundle
    elif [ ! -f "$SCRIPT_DIR/dev_bundle/.bundle_version.txt" ] ||
        grep -qvx "$BUNDLE_VERSION" "$SCRIPT_DIR/dev_bundle/.bundle_version.txt" ; then
        echo "Your dependency kit is out of date. I will download the new one." >&2
        install_dev_bundle
    fi

    export BABEL_CACHE_DIR="$SCRIPT_DIR/.babel-cache"
fi

DEV_BUNDLE="$SCRIPT_DIR/dev_bundle"
METEOR="$SCRIPT_DIR/tools/index.js"


# Bump our file descriptor ulimit as high as it will go. This is a
# temporary workaround for dependancy watching holding open too many
# files: https://app.asana.com/0/364581412985/472479912325
if [ "$(ulimit -n)" != "unlimited" ] ; then
    ulimit -n 16384 > /dev/null 2>&1 || \
    ulimit -n 8192 > /dev/null 2>&1 || \
    ulimit -n 4096 > /dev/null 2>&1 || \
    ulimit -n 2048 > /dev/null 2>&1 || \
    ulimit -n 1024 > /dev/null 2>&1 || \
    ulimit -n 512 > /dev/null 2>&1
fi


# In case that we have to use the universal system environment, make sure
# that at least the necessary binaries are available
if [ "$METEOR_UNIVERSAL_FLAG" == "ENV" ] ; then
    # test for platform or special build and installed binaries
    _NODE_VERSION=$("$DEV_BUNDLE/bin/node" --version 2>/dev/null)
    _NPM_VERSION=$("$DEV_BUNDLE/bin/npm" --version 2>/dev/null)
    _MONGO_VERSION=$("$DEV_BUNDLE/mongodb/bin/mongo" --version 2>/dev/null)
    _MONGOD_VERSION=$("$DEV_BUNDLE/mongodb/bin/mongod" --version 2>/dev/null)
    # check if all dependencies are available
    if [ -z "$_NODE_VERSION" -o -z "$_NPM_VERSION" -o -z "$_MONGO_VERSION" -o -z "$_MONGOD_VERSION" ] ; then
        echo "Meteor officially supports only i686 and x86_64 architecture for now."
        echo "Meteor universal unofficially supports arm and universal architectures as well."
        echo "To use the universal system environment make sure that the necessary binaries are pre-installed."
        # show missing binaries
        echo -e "\tcheck node version: $__NODE_VERSION"
        echo -e "\tcheck npm version: $__NPM_VERSION"
        echo -e "\tcheck mongo version: $__MONGO_VERSION"
        echo -e "\tcheck mongod version: $__MONGOD_VERSION"
        exit 1
    fi
fi


# We used to set $NODE_PATH here to include the node_modules from the dev
# bundle, but now we just get them from the symlink at tools/node_modules. This
# is better because node_modules directories found via the ancestor walk from
# the script take precedence over $NODE_PATH; it used to be that users would
# screw up their meteor installs by have a ~/node_modules

exec "$DEV_BUNDLE/bin/node" ${TOOL_NODE_FLAGS} "$METEOR" "$@"
